package lx.lock;
/**
 * Java 锁机制
 * @author lx
 * @date 2016-06-13
 * synchronized ,lock ,condition
 * 
 * synchronized:
 * 把代码块声明为 synchronized，有两个重要后果，通常是指该代码具有 原子性（atomicity）和 可见性
 * 1.1 原子性
   原子性意味着个时刻，只有一个线程能够执行一段代码，这段代码通过一个monitor object保护。
   从而防止多个线程在更新共享状态时相互冲突。
 *1.2 可见性
   可见性则更为微妙，它要对付内存缓存和编译器优化的各种反常行为。
   它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 。
   作用：如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。
   原理：当对象获取锁时，它首先使自己的高速缓存无效，这样就可以保证直接从主内存中装入变量。 
   同样，在对象释放锁之前，它会刷新其高速缓存，强制使已做的任何更改都出现在主内存中。 
   这样，会保证在同一个锁上同步的两个线程看到在 synchronized 块内修改的变量的相同值。
 */
public class textLock {

}
